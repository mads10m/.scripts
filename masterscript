#!/bin/bash


# ----------------------------------
# Define variables
# ----------------------------------

# Colors name
COLOR_BLACK="\033[0;30m"
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_RESET="\033[0m"

# ----------------------------------
# Function
# ----------------------------------

pause(){
	read -p "Press [Enter] key to continue..." fackEnterKey
}


upgradeAndClean(){
	sudo apt-get update
	sudo apt-get upgrade
	sudo apt-get dist-upgrade
	sudo apt-get autoclean
	sudo apt-get autoremove

	# Test if a reboot is needed
	if [ -f /var/run/reboot-required ]; then
		echo -e $COLOR_RED'Reboot required!'$COLOR_RESET
	fi

	pause
}

REPOSITORIES_LIST=(
	".dotfiles"
	".scripts"
	#".vim"
	"Templates"
	".fzf"
	#"vim"
	"nvim"
	"grive2"
)

updateRepositories(){
	# TODO test if 'git pull' fails
	for i in "${REPOSITORIES_LIST[@]}"; do
		echo "Checking $i"
		cd ~/$i/ && git fetch
		if [[ $(git status | grep -o 'Your branch is up to date') != 'Your branch is up to date' ]]; then
			echo "Updating $i"
			echo ""
			git pull

			# Update fzf
			if [[ "$i" == *".fzf" ]]; then
				~/.fzf/install
			fi

			## Update and compile vim
			#if [[ "$i" == "vim" ]]; then
			#	sudo make uninstall
			#	make distclean
			#	./configure --prefix=/usr/local --disable-darwin --enable-luainterp=yes --with-lua-prefix=/usr/include/lua5.1 --enable-perlinterp=yes --enable-python3interp=yes --enable-python3interp=yes --enable-tclinterp=yes -enable-rubyinterp=yes --enable-cscope --enable-terminal --enable-multibyte --enable-xim --enable-fontset --enable-gui=gtk3 --with-features=huge --with-x
			#	#./configure --prefix=/usr/local --disable-darwin --enable-luainterp=yes --with-lua-prefix=/usr/include/lua5.1 --enable-perlinterp=yes --enable-python3interp=yes --enable-pythoninterp=yes --enable-tclinterp=yes -enable-rubyinterp=yes --enable-cscope --enable-terminal --enable-multibyte --enable-xim --enable-fontset --enable-gui=auto --with-features=huge --with-x
			#	sudo make VIMRUNTIMEDIR=/usr/local/share/vim/vim82
			#	sudo make install
			##	sudo make uninstall
			##	make distclean
			##	./configure --with-features=huge --enable-multibyte --enable-rubyinterp=yes --enable-python3interp=yes --with-python3-config-dir=$(python3-config --configdir) --with-python-command=/usr/bin/python3 --enable-perlinterp=yes --enable-luainterp=yes --enable-gui=auto --enable-cscope --prefix=/usr/local
			##	make VIMRUNTIMEDIR=/usr/local/share/vim/vim82
			##	sudo make install
			#fi

			# Update and compile neovim
			if [[ "$i" == "nvim" ]]; then
				make distclean
				make CMAKE_BUILD_TYPE=RelWithDebInfo
				# Create deb package to make it easier to uninstall
				cd ~/nvim/build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb
			fi

			# Update grive
			# https://yourcmc.ru/wiki/Grive2#Installation
			if [[ "$i" == "grive2" ]]; then
				read -p "Do you want to proceed compiling grive2? (y/n) " yn

				case $yn in 
					[yY] ) echo ok, we will proceed;
						cd ~/grive2/build;
						cmake ..;
						make -j4;
						sudo make install;
						break;;
					*) echo "aborting";
						break;;
				esac
			fi
		fi
	done

	pause
}

# Menu headlines
SYSTEM_MAINTENANCE="${COLOR_GREEN}SYSTEM MAINTENANCE${COLOR_RESET}"
BUNDLES="${COLOR_GREEN}BUNDLES${COLOR_RESET}"
PLACEHOLDER="${COLOR_GREEN}SOMETHING ELSE${COLOR_RESET}"

show_menu(){
	clear
	echo    "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo    "          MASTERSCRIPT          "
	echo    "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo -e "${SYSTEM_MAINTENANCE}"
	echo    "1. Clean And Upgrade System"
	echo    "2. Update My Repositories"
	echo    "3. Sync google drive"
	echo    ""
	echo -e "${BUNDLES}"
	echo    "4. (1 and 2)"
	echo    " - Clean And Upgrade System"
	echo    " - Update My Repositories  "
	echo    ""
	echo -e "${PLACEHOLDER}"
	echo    "5. Help"
	echo    "6. Exit"
	echo    ""
}

read_options(){
	local choice
	read -p "Enter choice: " choice
	case $choice in
		1) upgradeAndClean ;;
		2) updateRepositories;;
		3) (cd ~/google-drive/ && grive && pause);;
		4) upgradeAndClean && updateRepositories;;
		5) echo -e "${COLOR_YELLOW}Help not written yet${COLOR_RESET}" && sleep 2;;
		6) exit 0;;
		*) echo -e "${COLOR_RED}Error:${COLOR_RESET} invalid input" && sleep 2
	esac
}


# -----------------------------------
# Main logic - infinite loop
# ------------------------------------
while true
do
	show_menu
	read_options
done
